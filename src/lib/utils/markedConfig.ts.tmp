// filepath: c:\Pip\svelte5\ti\src\lib\utils\markedConfig.ts
import { marked } from 'marked';

// Pirmiausia sukonfigūruokime Marked analizatorių
const renderer = new marked.Renderer();

// Pridėkime klases sąrašams ir sąrašo elementams
renderer.list = function(body, ordered) {
  const type = ordered ? 'ol' : 'ul';
  const className = ordered ? 'article-ol' : 'article-ul';
  return `<${type} class="${className}">${body}</${type}>`;
};

renderer.listitem = function(text) {
  return `<li class="article-li">${text}</li>`;
};

// Naudoti konfigūruotą analizatorių
marked.use({ renderer });

// Papildoma funkcija markdown apdorojimui
export async function parseMarkdownWithClasses(markdown: string): Promise<string> {
  // Objektas į string konvertavimas
  if (markdown && typeof markdown === 'object') {
    try {
      markdown = JSON.stringify(markdown);
    } catch (e) {
      console.error('Nepavyko konvertuoti objekto į tekstą:', e);
      markdown = '[Neįmanoma atvaizduoti turinio]';
    }
  }

  // Jei nėra teksto arba ne stringas - grąžiname tuščią stringą
  if (!markdown || typeof markdown !== 'string') {
    console.warn('Tekstas nėra stringas:', typeof markdown);
    return '';
  }

  try {
    // Tvarkyti sąrašų formatavimą, įsitikinant, kad prieš sąrašo elementus yra nauja eilutė
    let processedMarkdown = markdown;
    
    // Pridėkime naują eilutę prieš sąrašo ženklinius elementus, kad jie būtų atpažįstami
    processedMarkdown = processedMarkdown.replace(/([^\n])(\n[\s]*[-*+][\s]+)/g, '$1\n$2');
    
    // Pridėkime naują eilutę prieš numeruotus sąrašo elementus
    processedMarkdown = processedMarkdown.replace(/([^\n])(\n[\s]*\d+\.[\s]+)/g, '$1\n$2');
    
    // Analizuoti markdown naudojant mūsų konfigūruotą renderer
    let html = await marked.parse(processedMarkdown);
    
    // Dvigubas patikrinimas - ar visi sąrašo elementai turi klases
    html = html
      .replace(/<ul(?!\s+class=)/g, '<ul class="article-ul"')
      .replace(/<ol(?!\s+class=)/g, '<ol class="article-ol"')
      .replace(/<li(?!\s+class=)/g, '<li class="article-li"');
    
    // Pašalinkime [object Object] tekstus
    html = html.replace(/\[object Object\]/g, '');
    
    return html;
  } catch (e) {
    console.error('Klaida apdorojant markdown:', e);
    return markdown || '';
  }
}
